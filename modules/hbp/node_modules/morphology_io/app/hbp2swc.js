// app/index.js
const mp = require('./morphology_parser.js')
const fs = require('fs')
const argv = require('minimist')(process.argv.slice(2));
// console.log(argv)
var infile = argv['infile'] || null
var outfile = argv['outfile'] || null
// '../test_morphologies/DeFelipe_Auto_DK_Edited_Complete_with_spines.ASC'

function outputData(tree) {
  if (outfile) {
    var parts = outfile.split('.')
    var ext = parts[parts.length-1].toLowerCase()
    swcOUTPUT = tree.toSWC(ext, false)
    // console.log(swcOUTPUT)
    fs.writeFileSync(outfile, swcOUTPUT)
    // fs.writeFile(outfile, swcOUTPUT, err => {
    //   if (err) {
    //     console.error(err);
    //   }
    //   // file written successfully
    // });
    //
    // fs.writeFile(outfile,tree.toSWC(ext, false),'utf8')
  } else {
    console.log( '{\n  "result":'+tree.toSWC('swc', false)+'\n}' )
  }
}

if (infile) {
  var parser = null
  var encoding = 'utf8'
  var parts = infile.split('.')
  var ext = parts[parts.length-1].toLowerCase()
  if (ext == 'xml') {
    parser = [mp.neurolucida_class,'treeFromXML']
  } else if (ext == 'asc') {
    parser = [mp.neurolucida_class,'treeFromASC']
  } else if (ext == 'dat' || ext == 'nrx') {
    parser = [mp.neurolucida_class,'treeFromDAT']
    encoding = undefined
  } else if (ext == 'swc') {
    parser = [mp.swc_class,'treeFromSWC']
  } else if (ext == 'xwc') {
    parser = [mp.swc_class,'treeFromXWC']
  } else {
    throw 'File "'+fileName+'" does not have a supported extension (.asc, .xml, .swc, .xwc, .dat, .nrx)'
  }

  fs.readFile(infile,encoding,function(err,data) {
    if (data instanceof Uint8Array) data = data.buffer
    try {
      if (err !== null) throw(err)
      var tree = (new parser[0])[parser[1]](data,infile)
      // console.log(tree)
      outputData(tree)
    } catch(e) {
      console.log( JSON.stringify({"error":e.message,"stack":e.stack},null,2) )
    }
  })
} else {
  var stdin = process.stdin
  var data = []
  stdin.setEncoding('utf8')
  stdin.on('readable', function() {
    var chunk = process.stdin.read();
    if (chunk !== null) data.push(chunk)
  })
  stdin.on('end', function () {
    var jwc = JSON.parse(data.join(''))
    swcPlus = new swcPlus_class()
    var pointsLines = swcPlus.parsePoints(jwc.swcPoints)
    var tree = new tree_class('stdin',0,jwc.metaData,jwc.customTypes,jwc.customProperties,pointsLines[0],pointsLines[1])
    outputData(tree)
  })
}
